datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sector {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    users           User[]
    concursos       Concurso[]
    tarefas         Tarefa[]
    organizacoes    Organizacao[]
    servicosOrg     OrganizacaoServico[]
}


enum UserRole {
  ADMIN
  GUEST
  COMPANY
  WORKER
}


model User {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    accounts        Account[]
    sessions        Session[]
    firstName       String?
    lastName        String?
    email           String?    @unique
    emailVerified   DateTime?
    role            UserRole   @default(GUEST)
    hashPass        String
    avatarUrl       String?
    bio             String?
    slogan          String?
    address         String?
    nuit            String?
    contact         String?
    provincia       String?
    cidade          String?
    idade           DateTime?
    sectorId        String?      @db.ObjectId
    sector          Sector?      @relation(fields: [sectorId], references: [id])
    tarefas         Tarefa[]
    propostasC      PropostaConcurso[]
    propostasT      PropostaTarefa[]
    saves           Saved[]
    lojas           Loja[]
    favoritStore    Follower[]
    colaboradores   Colaborador[]
    organizacoes    Organizacao[]
    connections     Connect[]
    documentos      Documento[]
    createAt        DateTime    @default(now())
}


model Organizacao {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    userId          String    @db.ObjectId
    user            User      @relation(fields: [userId], references: [id])
    name            String
    sectorId        String    @db.ObjectId
    sector          Sector    @relation(fields: [sectorId], references: [id])
    logo            String?
    slogan          String?
    descricao       String?
    nuit            String?
    email           String?
    contactos       String?
    endereco        String?
    localizacao     String?
    colaboradores   Colaborador[]
    concursos       Concurso[]
    servicos        OrganizacaoServico[]
    departamentos   Departamento[]
    documentos      Documento[]
}


model OrganizacaoServico {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    sectorId        String    @db.ObjectId
    sector          Sector    @relation(fields: [sectorId], references: [id])
    authorId        String    @db.ObjectId
    author          Organizacao     @relation(fields: [authorId], references: [id])
    title           String?
    descricao       String?
    preco           String?
    cover           String?
    files           ServicoFile[]
}

model ServicoFile {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    servicoId       String    @db.ObjectId
    servico         OrganizacaoServico  @relation(fields: [servicoId], references: [id])
    url             String?
}

model Concurso {
    id                String    @id @default(auto()) @map("_id") @db.ObjectId
    authorId          String    @db.ObjectId
    sectorId          String    @db.ObjectId
    author            Organizacao     @relation(fields: [authorId], references: [id])
    sector            Sector    @relation(fields: [sectorId], references: [id])
    title             String?
    precoMin          String?
    precoMax          String?
    prazo             DateTime?
    localizacao       String?
    descricao         String?
    propostas         PropostaConcurso[]
    ficheiros         ConcursoFile[]
    createAt          DateTime    @default(now())
}

model ConcursoFile {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    fileId            String?
    concursoId     String   @db.ObjectId
    concurso       Concurso   @relation(fields: [concursoId], references: [id])
}

model Tarefa {
    id              String      @id @default(auto()) @map("_id") @db.ObjectId
    userId          String    @db.ObjectId
    sectorId        String    @db.ObjectId
    user            User        @relation(fields: [userId], references: [id])
    sector          Sector      @relation(fields: [sectorId], references: [id])
    title           String?
    precoMin        String?
    precoMax        String?
    prazo           DateTime?
    modalidade      String?   @default("remoto")
    localizacao     String?
    descricao       String?
    createAt        DateTime    @default(now())
    ficheiros       TarefaFile[]
    propostas       PropostaTarefa[]
}

model TarefaFile {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    tarefaId        String  @db.ObjectId
    fileId          String?
    tarefa          Tarefa   @relation(fields: [tarefaId], references: [id])
}

model PropostaConcurso {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    userId          String    @db.ObjectId
    user            User      @relation(fields: [userId], references: [id])
    concursoId      String    @db.ObjectId
    concurso        Concurso  @relation(fields: [concursoId], references: [id])
    orcamento       String?
    tempo           String?
    periodo         String?
    descricao       String?
    status          String?   @default("pending")
    createAt        DateTime   @default(now())
}

model PropostaTarefa {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    userId          String    @db.ObjectId
    user            User      @relation(fields: [userId], references: [id])
    tarefaId        String    @db.ObjectId
    tarefa          Tarefa    @relation(fields: [tarefaId], references: [id])
    orcamento       String?
    tempo           String?
    periodo         String?
    descricao       String?
    status          String?     @default("pending")
    createAt        DateTime    @default(now())
}

model Saved {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    userId          String    @db.ObjectId
    user            User      @relation(fields: [userId], references: [id])
    type            String
    objectId        String?
}

model Loja {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    userId          String    @db.ObjectId
    user            User      @relation(fields: [userId], references: [id])     
    name            String?
    descricao       String?
    sector          String?
    logo            String?
    createAt        DateTime    @default(now())
    followers       Follower[]
    produtos        Product[]
}

model Follower {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @db.ObjectId
  user            User      @relation(fields: [userId], references: [id])
  lojaId          String    @db.ObjectId
  loja            Loja      @relation(fields: [lojaId], references: [id]) 
}

model Product {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  lojaId          String    @db.ObjectId
  loja            Loja      @relation(fields: [lojaId], references: [id])
  categoria       String?
  name            String?
  price           String?
  cover           String?
  descricao       String?
  lotMin          String?
  stock           String? @default("retalho")
  quantidade      String? @default("avulso")
}

model Colaborador {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  organizacaoId   String        @db.ObjectId
  organizacao     Organizacao   @relation(fields: [organizacaoId], references: [id])
  departamentoId  String?       @db.ObjectId
  departamento    Departamento? @relation(fields: [departamentoId], references: [id])
  cargo           String?
  descricao       String?
}

model Departamento {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  organizacaoId   String        @db.ObjectId
  organizacao     Organizacao   @relation(fields: [organizacaoId], references: [id])
  colaboradores   Colaborador[]
  documentos      Documento[]
  name            String?
}

model Connect {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  media           String?
  token           String?
}

model Documento {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  organizacaoId   String?        @db.ObjectId
  organizacao     Organizacao?   @relation(fields: [organizacaoId], references: [id])
  departamentoId  String?       @db.ObjectId
  departamento    Departamento? @relation(fields: [departamentoId], references: [id])
  tipo            String?
  descricao       String?
  fileId          String?
}